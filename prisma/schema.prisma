generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?
  passwordHash  String
  role          Role             @default(PATIENT)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isVerified    Boolean          @default(false)

  refreshTokens     RefreshToken[]
  VerificationCode  VerificationCode[]
  PasswordReset     PasswordReset[]

  // Link to patient record (only if role = PATIENT)
  patientProfile    Patient?
}
 
model RefreshToken {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  tokenHash    String
  revoked      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  expiresAt    DateTime
  replacedById String?
  replacedBy   RefreshToken? @relation("Replacement", fields: [replacedById], references: [id])

  RefreshToken RefreshToken[] @relation("Replacement")
}

model VerificationCode {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

model PasswordReset {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Patient {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  firstName      String
  lastName       String
  age            Int
  contactInfo    String
  medicalHistory String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  visits         Visit[]
}

model Visit {
  id        String    @id @default(cuid())
  patient   Patient   @relation(fields: [patientId], references: [id])
  patientId String
  date      DateTime  @default(now())
  notes     String?
  treatments Treatment[]
}

model Treatment {
  id        String   @id @default(cuid())
  visit     Visit    @relation(fields: [visitId], references: [id])
  visitId   String
  name      String
  dosage    String?
  notes     String?
  createdAt DateTime @default(now())
}
